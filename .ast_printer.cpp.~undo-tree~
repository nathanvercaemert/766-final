(undo-tree-save-format-version . 1)
"29d159e4a7005a3c962fce581413c3c164a5a6e0"
[nil nil nil nil (25672 7873 783675 989000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1558 . 1559) (nil fontified nil 767 . 1559) (nil fontified nil 766 . 767) (nil fontified nil 762 . 766) (nil fontified nil 761 . 762) (nil fontified nil 1 . 761) (1 . 1559) (t . -1)) nil (25672 7873 783663 785000) 0 nil])
([nil nil ((#("void print_ast(CXCursor cursor, int depth) {
    if (clang_getCursorKind(cursor) == CXCursor_FirstInvalid)
        return;

    for (int i = 0; i < depth; ++i)
        std::cout << \"  \";

    CXString cursor_kind_name = clang_getCursorKindSpelling(clang_getCursorKind(cursor));
    CXString cursor_spelling = clang_getCursorSpelling(cursor);
    std::cout << clang_getCString(cursor_kind_name) << \" \" << clang_getCString(cursor_spelling) << std::endl;

    clang_disposeString(cursor_kind_name);
    clang_disposeString(cursor_spelling);

    clang_visitChildren(cursor,
                        [](CXCursor c, CXCursor parent, CXClientData client_data) {
                            int *depth = reinterpret_cast<int*>(client_data);
                            print_ast(c, *depth + 1);
                            return CXChildVisit_Continue;
                        },
                        &depth);
}
" 0 1 (face font-lock-type-face c-is-sws t fontified t) 1 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 15 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 30 (face font-lock-variable-name-face fontified t) 30 31 (c-type c-decl-arg-start fontified t) 31 32 (fontified t) 32 35 (face font-lock-type-face fontified t) 35 36 (fontified t) 36 41 (face font-lock-variable-name-face fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 49 (fontified t) 49 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-3-face) fontified t) 73 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 115 (fontified t) 115 121 (face font-lock-keyword-face fontified t) 121 128 (fontified t) 128 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-2-face) fontified t) 133 135 (face font-lock-type-face fontified t) 135 136 (face font-lock-type-face c-type c-decl-id-start fontified t) 136 137 (fontified t) 137 138 (face font-lock-variable-name-face fontified t) 138 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-2-face) fontified t) 159 168 (fontified t) 168 171 (face font-lock-constant-face fontified t) 171 181 (fontified t) 181 185 (face font-lock-string-face fontified t) 185 192 (fontified t) 192 199 (face font-lock-type-face fontified t) 199 200 (face font-lock-type-face c-type c-decl-id-start fontified t) 200 201 (fontified t) 201 217 (face font-lock-variable-name-face fontified t) 217 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-2-face) fontified t) 248 267 (fontified t) 267 268 (face (rainbow-delimiters-depth-3-face) fontified t) 268 274 (fontified t) 274 275 (face (rainbow-delimiters-depth-3-face) fontified t) 275 276 (face (rainbow-delimiters-depth-2-face) fontified t) 276 282 (fontified t) 282 289 (face font-lock-type-face fontified t) 289 290 (face font-lock-type-face c-type c-decl-id-start fontified t) 290 291 (fontified t) 291 306 (face font-lock-variable-name-face fontified t) 306 332 (fontified t) 332 333 (face (rainbow-delimiters-depth-2-face) fontified t) 333 339 (fontified t) 339 340 (face (rainbow-delimiters-depth-2-face) fontified t) 340 346 (fontified t) 346 349 (face font-lock-constant-face fontified t) 349 375 (fontified t) 375 376 (face (rainbow-delimiters-depth-2-face) fontified t) 376 392 (fontified t) 392 393 (face (rainbow-delimiters-depth-2-face) fontified t) 393 397 (fontified t) 397 400 (face font-lock-string-face fontified t) 400 420 (fontified t) 420 421 (face (rainbow-delimiters-depth-2-face) fontified t) 421 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-2-face) fontified t) 437 441 (fontified t) 441 444 (face font-lock-constant-face fontified t) 444 476 (fontified t) 476 477 (face (rainbow-delimiters-depth-2-face) fontified t) 477 493 (fontified t) 493 494 (face (rainbow-delimiters-depth-2-face) fontified t) 494 519 (fontified t) 519 520 (face (rainbow-delimiters-depth-2-face) fontified t) 520 535 (fontified t) 535 536 (face (rainbow-delimiters-depth-2-face) fontified t) 536 562 (fontified t) 562 563 (face (rainbow-delimiters-depth-2-face) fontified t) 563 595 (fontified t) 595 596 (face (rainbow-delimiters-depth-3-face) fontified t) 596 597 (face (rainbow-delimiters-depth-3-face) fontified t) 597 598 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 598 606 (face font-lock-type-face fontified t) 606 607 (fontified t) 607 608 (face font-lock-variable-name-face fontified t) 608 609 (c-type c-decl-arg-start fontified t) 609 610 (fontified t) 610 618 (face font-lock-type-face fontified t) 618 619 (fontified t) 619 625 (face font-lock-variable-name-face fontified t) 625 626 (c-type c-decl-arg-start fontified t) 626 627 (fontified t) 627 639 (face font-lock-type-face fontified t) 639 640 (fontified t) 640 651 (face font-lock-variable-name-face fontified t) 651 652 (face (rainbow-delimiters-depth-3-face) fontified t) 652 653 (fontified t) 653 654 (face (rainbow-delimiters-depth-3-face) fontified t) 654 683 (fontified t) 683 685 (face font-lock-type-face fontified t) 685 686 (face font-lock-type-face c-type c-decl-id-start fontified t) 686 688 (fontified t) 688 693 (face font-lock-variable-name-face fontified t) 693 696 (fontified t) 696 712 (face font-lock-keyword-face fontified t) 712 713 (face (rainbow-delimiters-depth-4-face) fontified t syntax-table (4 . 62)) 713 716 (face font-lock-type-face fontified t) 716 717 (fontified t) 717 718 (face (rainbow-delimiters-depth-4-face) fontified t syntax-table (5 . 60)) 718 719 (face (rainbow-delimiters-depth-4-face) fontified t) 719 730 (fontified t) 730 731 (face (rainbow-delimiters-depth-4-face) fontified t) 731 770 (fontified t) 770 771 (face (rainbow-delimiters-depth-4-face) fontified t) 771 784 (fontified t) 784 785 (face (rainbow-delimiters-depth-4-face) fontified t) 785 815 (fontified t) 815 821 (face font-lock-keyword-face fontified t) 821 869 (fontified t) 869 870 (face (rainbow-delimiters-depth-3-face) fontified t) 870 902 (fontified t) 902 903 (face (rainbow-delimiters-depth-2-face) fontified t) 903 905 (fontified t) 905 906 (face (rainbow-delimiters-depth-1-face) fontified t) 906 907 (fontified t)) . -49) (undo-tree-id12 . -907) (undo-tree-id13 . -571) (undo-tree-id14 . -907) (undo-tree-id15 . -907) (undo-tree-id16 . -1) 956 (t 25672 7873 778098 542000)) nil (25672 11119 596046 426000) 0 nil])
([nil nil ((48 . 49)) nil (25672 11119 596044 29000) 0 nil])
([nil nil ((49 . 50)) nil (25672 11119 596043 414000) 0 nil])
([nil nil ((#("#include <iostream>
#include <clang-c/Index.h>

;" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t syntax-table (4 . 62) face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 10 18 (c-in-sws t face font-lock-string-face fontified t) 18 19 (c-in-sws t syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 19 20 (c-in-sws t fontified t) 20 21 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 21 28 (c-in-sws t face font-lock-preprocessor-face fontified t) 28 29 (c-in-sws t fontified t) 29 30 (c-in-sws t syntax-table (4 . 62) face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 30 45 (c-in-sws t face font-lock-string-face fontified t) 45 46 (c-in-sws t syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 46 47 (c-in-sws t fontified t) 47 48 (c-is-sws t fontified t) 48 49 (c-is-sws t fontified t)) . 1) (undo-tree-id2 . -19) (undo-tree-id3 . -49) (undo-tree-id4 . -47) (undo-tree-id5 . 39) (undo-tree-id6 . -18) (undo-tree-id7 . -48) (undo-tree-id8 . -49) (undo-tree-id9 . -48) (undo-tree-id10 . -49) (undo-tree-id11 . -49)) nil (25672 11119 596042 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1713 . 1714) (nil fontified nil 1525 . 1714) (nil fontified nil 1524 . 1525) (nil fontified nil 1520 . 1524) (nil fontified nil 1519 . 1520) (nil fontified nil 1 . 1519) (1 . 1714)) nil (25672 11119 596029 7000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1713) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1714) nil (25672 11119 595998 920000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-type-face c-is-sws t fontified t)) . 49) (t 25672 11119 601340 23000)) nil (25672 11401 820636 894000) 0 nil])
([nil nil ((49 . 50)) nil (25672 11409 325220 269000) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . 95)) ((95 . 96)) (25672 11401 820257 86000) 0 nil] [nil nil ((#("oid print_check_expression(CXCursor cursor) {
    if (clang_getCursorKind(cursor) == CXCursor_CompoundStmt)
        return;

    CXString cursor_spelling = clang_getCursorSpelling(cursor);
    std::cout << clang_getCString(cursor_spelling) << \" \";
    clang_disposeString(cursor_spelling);

    clang_visitChildren(cursor, [](CXCursor c, CXCursor parent, CXClientData client_data) {
                            print_check_expression(c);
                            return CXChildVisit_Continue;
                        },
                        nullptr);
}
" 0 1 (c-is-sws t face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t) 4 26 (face font-lock-function-name-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 27 35 (face font-lock-type-face fontified t) 35 36 (fontified t) 36 42 (face font-lock-variable-name-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 46 (fontified t) 46 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t) 74 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-2-face) fontified t) 107 116 (fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 129 (fontified t) 129 136 (face font-lock-type-face fontified t) 136 137 (face font-lock-type-face c-type c-decl-id-start fontified t) 137 138 (fontified t) 138 153 (face font-lock-variable-name-face fontified t) 153 179 (fontified t) 179 180 (face (rainbow-delimiters-depth-2-face) fontified t) 180 186 (fontified t) 186 187 (face (rainbow-delimiters-depth-2-face) fontified t) 187 193 (fontified t) 193 196 (face font-lock-constant-face fontified t) 196 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-2-face) fontified t) 223 238 (fontified t) 238 239 (face (rainbow-delimiters-depth-2-face) fontified t) 239 243 (fontified t) 243 246 (face font-lock-string-face fontified t) 246 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-2-face) fontified t) 272 287 (fontified t) 287 288 (face (rainbow-delimiters-depth-2-face) fontified t) 288 314 (fontified t) 314 315 (face (rainbow-delimiters-depth-2-face) fontified t) 315 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-3-face) fontified t) 324 325 (face (rainbow-delimiters-depth-3-face) fontified t) 325 326 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 326 334 (face font-lock-type-face fontified t) 334 335 (fontified t) 335 336 (face font-lock-variable-name-face fontified t) 336 337 (c-type c-decl-arg-start fontified t) 337 338 (fontified t) 338 346 (face font-lock-type-face fontified t) 346 347 (fontified t) 347 353 (face font-lock-variable-name-face fontified t) 353 354 (c-type c-decl-arg-start fontified t) 354 355 (fontified t) 355 367 (face font-lock-type-face fontified t) 367 368 (fontified t) 368 379 (face font-lock-variable-name-face fontified t) 379 380 (face (rainbow-delimiters-depth-3-face) fontified t) 380 381 (fontified t) 381 382 (face (rainbow-delimiters-depth-3-face) fontified t) 382 433 (fontified t) 433 434 (face (rainbow-delimiters-depth-4-face) fontified t) 434 435 (fontified t) 435 436 (face (rainbow-delimiters-depth-4-face) fontified t) 436 466 (fontified t) 466 472 (face font-lock-keyword-face fontified t) 472 520 (fontified t) 520 521 (face (rainbow-delimiters-depth-3-face) fontified t) 521 547 (fontified t) 547 554 (face font-lock-constant-face fontified t) 554 555 (face (rainbow-delimiters-depth-2-face) fontified t) 555 557 (fontified t) 557 558 (face (rainbow-delimiters-depth-1-face) fontified t) 558 559 (fontified t)) . 49) (undo-tree-id17 . -559) (undo-tree-id18 . -383) (undo-tree-id19 . -383) (undo-tree-id20 . -559) (undo-tree-id21 . -557) (undo-tree-id22 . -559) (undo-tree-id23 . -557) (undo-tree-id24 . -558) (undo-tree-id25 . -559)) ((49 . 608)) (25672 11398 22917 555000) 0 nil])
([nil nil ((47 . 49)) nil (25672 11409 325219 615000) 0 nil])
nil
([nil nil ((48 . 49)) ((#("
" 0 1 (c-is-sws t fontified t)) . 48) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (t 25672 11369 148883 189000)) (25672 11369 150677 271000) 0 nil])
([nil nil ((nil rear-nonsticky nil 716 . 717) (nil fontified nil 49 . 717) (49 . 717)) nil (25672 11409 325215 237000) 0 nil])
nil
([nil nil ((#("void print_check_expression(CXCursor cursor) {
    if (clang_getCursorKind(cursor) == CXCursor_CompoundStmt)
        return;

    if (clang_getCursorKind(cursor) == CXCursor_BinaryOperator) {
        CXString cursor_spelling = clang_getCursorSpelling(cursor);
        std::cout << clang_getCString(cursor_spelling);
        clang_disposeString(cursor_spelling);
    } else {
        clang_visitChildren(cursor, [](CXCursor c, CXCursor parent, CXClientData client_data) {
                                print_check_expression(c);
                                return CXChildVisit_Continue;
                            },
                            nullptr);
    }
}
" 0 1 (c-is-sws t face font-lock-type-face fontified t) 1 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 27 (face font-lock-function-name-face fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 28 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 43 (face font-lock-variable-name-face fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 51 (fontified t) 51 53 (face font-lock-keyword-face fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-3-face) fontified t) 82 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-2-face) fontified t) 108 117 (fontified t) 117 123 (face font-lock-keyword-face fontified t) 123 130 (fontified t) 130 132 (face font-lock-keyword-face fontified t) 132 133 (fontified t) 133 134 (face (rainbow-delimiters-depth-2-face) fontified t) 134 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-3-face) fontified t) 154 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-3-face) fontified t) 161 188 (fontified t) 188 189 (face (rainbow-delimiters-depth-2-face) fontified t) 189 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-2-face) fontified t) 191 200 (fontified t) 200 207 (face font-lock-type-face fontified t) 207 208 (face font-lock-type-face c-type c-decl-id-start fontified t) 208 209 (fontified t) 209 224 (face font-lock-variable-name-face fontified t) 224 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-3-face) fontified t) 251 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-3-face) fontified t) 258 268 (fontified t) 268 271 (face font-lock-constant-face fontified t) 271 297 (fontified t) 297 298 (face (rainbow-delimiters-depth-3-face) fontified t) 298 313 (fontified t) 313 314 (face (rainbow-delimiters-depth-3-face) fontified t) 314 343 (fontified t) 343 344 (face (rainbow-delimiters-depth-3-face) fontified t) 344 359 (fontified t) 359 360 (face (rainbow-delimiters-depth-3-face) fontified t) 360 366 (fontified t) 366 367 (face (rainbow-delimiters-depth-2-face) fontified t) 367 368 (fontified t) 368 372 (face font-lock-keyword-face fontified t) 372 373 (fontified t) 373 374 (face (rainbow-delimiters-depth-2-face) fontified t) 374 402 (fontified t) 402 403 (face (rainbow-delimiters-depth-3-face) fontified t) 403 411 (fontified t) 411 412 (face (rainbow-delimiters-depth-4-face) fontified t) 412 413 (face (rainbow-delimiters-depth-4-face) fontified t) 413 414 (face (rainbow-delimiters-depth-4-face) c-type c-decl-arg-start fontified t) 414 422 (face font-lock-type-face fontified t) 422 423 (fontified t) 423 424 (face font-lock-variable-name-face fontified t) 424 425 (c-type c-decl-arg-start fontified t) 425 426 (fontified t) 426 434 (face font-lock-type-face fontified t) 434 435 (fontified t) 435 441 (face font-lock-variable-name-face fontified t) 441 442 (c-type c-decl-arg-start fontified t) 442 443 (fontified t) 443 455 (face font-lock-type-face fontified t) 455 456 (fontified t) 456 467 (face font-lock-variable-name-face fontified t) 467 468 (face (rainbow-delimiters-depth-4-face) fontified t) 468 469 (fontified t) 469 470 (face (rainbow-delimiters-depth-4-face) fontified t) 470 525 (fontified t) 525 526 (face (rainbow-delimiters-depth-5-face) fontified t) 526 527 (fontified t) 527 528 (face (rainbow-delimiters-depth-5-face) fontified t) 528 562 (fontified t) 562 568 (face font-lock-keyword-face fontified t) 568 620 (fontified t) 620 621 (face (rainbow-delimiters-depth-4-face) fontified t) 621 651 (fontified t) 651 658 (face font-lock-constant-face fontified t) 658 659 (face (rainbow-delimiters-depth-3-face) fontified t) 659 665 (fontified t) 665 666 (face (rainbow-delimiters-depth-2-face) fontified t) 666 667 (fontified t) 667 668 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t) 668 669 (fontified t)) . -49) (undo-tree-id42 . -461) (undo-tree-id43 . -668) (undo-tree-id44 . -669) (undo-tree-id45 . -669) (undo-tree-id46 . -668) (undo-tree-id47 . -668) (undo-tree-id48 . -4) (undo-tree-id49 . -669) (undo-tree-id50 . -1) (undo-tree-id51 . -4) (undo-tree-id52 . -5) 718 (t 25672 11409 333575 861000)) nil (25672 11440 134281 794000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . -48) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 49) nil (25672 11440 134273 320000) 0 nil])
([nil nil ((47 . 49) (t 25672 11440 138004 442000)) nil (25672 11470 440107 538000) 0 nil])
([nil nil ((nil rear-nonsticky nil 716 . 717) (nil fontified nil 49 . 717) (49 . 717)) nil (25672 11470 440107 191000) 0 nil])
([nil nil ((#("

void print_check_expression(CXCursor cursor) {
    if (clang_getCursorKind(cursor) == CXCursor_CompoundStmt)
        return;

    CXString cursor_spelling = clang_getCursorSpelling(cursor);
    std::cout << clang_getCString(cursor_spelling) << \" \";
    clang_disposeString(cursor_spelling);

    clang_visitChildren(cursor, [](CXCursor c, CXCursor parent, CXClientData client_data) {
                            print_check_expression(c);
                            return CXChildVisit_Continue;
                        },
                        nullptr);
}
" 0 1 (fontified t) 1 2 (fontified t c-is-sws t) 2 3 (face font-lock-type-face fontified t c-is-sws t) 3 4 (face font-lock-type-face fontified t c-is-sws t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 29 (face font-lock-function-name-face fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 30 38 (face font-lock-type-face fontified t) 38 39 (fontified t) 39 45 (face font-lock-variable-name-face fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t) 53 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t) 110 111 (fontified t) 111 119 (fontified t) 119 125 (face font-lock-keyword-face fontified t) 125 132 (fontified t) 132 139 (face font-lock-type-face fontified t) 139 140 (face font-lock-type-face c-type c-decl-id-start fontified t) 140 141 (fontified t) 141 156 (face font-lock-variable-name-face fontified t) 156 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-2-face) fontified t) 183 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-2-face) fontified t) 190 196 (fontified t) 196 199 (face font-lock-constant-face fontified t) 199 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-2-face) fontified t) 226 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-2-face) fontified t) 242 246 (fontified t) 246 249 (face font-lock-string-face fontified t) 249 274 (fontified t) 274 275 (face (rainbow-delimiters-depth-2-face) fontified t) 275 290 (fontified t) 290 291 (face (rainbow-delimiters-depth-2-face) fontified t) 291 317 (fontified t) 317 318 (face (rainbow-delimiters-depth-2-face) fontified t) 318 326 (fontified t) 326 327 (face (rainbow-delimiters-depth-3-face) fontified t) 327 328 (face (rainbow-delimiters-depth-3-face) fontified t) 328 329 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 329 337 (face font-lock-type-face fontified t) 337 338 (fontified t) 338 339 (face font-lock-variable-name-face fontified t) 339 340 (c-type c-decl-arg-start fontified t) 340 341 (fontified t) 341 349 (face font-lock-type-face fontified t) 349 350 (fontified t) 350 356 (face font-lock-variable-name-face fontified t) 356 357 (c-type c-decl-arg-start fontified t) 357 358 (fontified t) 358 370 (face font-lock-type-face fontified t) 370 371 (fontified t) 371 382 (face font-lock-variable-name-face fontified t) 382 383 (face (rainbow-delimiters-depth-3-face) fontified t) 383 384 (fontified t) 384 385 (face (rainbow-delimiters-depth-3-face) fontified t) 385 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-4-face) fontified t) 437 438 (fontified t) 438 439 (face (rainbow-delimiters-depth-4-face) fontified t) 439 469 (fontified t) 469 475 (face font-lock-keyword-face fontified t) 475 523 (fontified t) 523 524 (face (rainbow-delimiters-depth-3-face) fontified t) 524 550 (fontified t) 550 557 (face font-lock-constant-face fontified t) 557 558 (face (rainbow-delimiters-depth-2-face) fontified t) 558 560 (fontified t) 560 561 (face (rainbow-delimiters-depth-1-face) fontified t) 561 562 (fontified t)) . -717) (undo-tree-id53 . -1) (undo-tree-id54 . -294) (undo-tree-id55 . -562) (undo-tree-id56 . -386) (undo-tree-id57 . -386) (undo-tree-id58 . -562) (undo-tree-id59 . -2) (undo-tree-id60 . -560) (undo-tree-id61 . -2) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -562) (undo-tree-id70 . -562) (undo-tree-id71 . -1) 1279) nil (25672 11470 440106 140000) 0 nil])
([nil nil ((717 . 718)) nil (25672 11470 440083 951000) 0 nil])
([nil nil ((1318 . 1326) (#("        " 0 8 (fontified nil)) . 1317) (undo-tree-id27 . -8) (1316 . 1326) (t 25672 11470 440510 24000)) nil (25674 37712 89061 119000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 1318) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) 1326) nil (25674 37712 89059 556000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1317) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . 1) (undo-tree-id23 . -1) 1318) nil (25674 37712 89057 844000) 0 nil])
([nil nil ((1317 . 1325)) nil (25674 37712 89055 44000) 0 nil])
([nil nil ((1325 . 1327)) nil (25674 37712 89054 380000) 0 nil])
([nil nil ((1327 . 1348)) nil (25674 37712 89053 563000) 0 nil])
([nil nil ((1348 . 1350)) nil (25674 37712 89052 830000) 0 nil])
([nil nil ((1257 . 1262)) nil (25674 37712 89052 246000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1617 . 1618) (nil fontified nil 1262 . 1618) (1262 . 1618)) nil (25674 37712 89051 849000) 0 nil])
([nil nil ((#("
    if (clang_getCursorKind(cursor) == CXCursor_ForStmt) {
        // GPT replace this block
        std::cout << \"Check expression in the for loop: \";
        print_check_expression(cursor);
        std::cout << std::endl;
    }
" 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 60 (fontified t) 60 68 (c-in-sws t c-is-sws t fontified t) 68 69 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 69 70 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 70 71 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 71 72 (c-in-sws t fontified t face font-lock-comment-face) 72 73 (c-in-sws t fontified t face font-lock-comment-face) 73 74 (c-in-sws t fontified t face font-lock-comment-face) 74 75 (c-in-sws t fontified t face font-lock-comment-face) 75 76 (c-in-sws t fontified t face font-lock-comment-face) 76 77 (c-in-sws t fontified t face font-lock-comment-face) 77 78 (c-in-sws t fontified t face font-lock-comment-face) 78 79 (c-in-sws t fontified t face font-lock-comment-face) 79 80 (c-in-sws t fontified t face font-lock-comment-face) 80 81 (c-in-sws t fontified t face font-lock-comment-face) 81 82 (c-in-sws t fontified t face font-lock-comment-face) 82 83 (c-in-sws t fontified t face font-lock-comment-face) 83 84 (c-in-sws t fontified t face font-lock-comment-face) 84 85 (c-in-sws t fontified t face font-lock-comment-face) 85 86 (c-in-sws t fontified t face font-lock-comment-face) 86 87 (c-in-sws t fontified t face font-lock-comment-face) 87 88 (c-in-sws t fontified t face font-lock-comment-face) 88 89 (c-in-sws t fontified t face font-lock-comment-face) 89 90 (c-in-sws t fontified t face font-lock-comment-face) 90 91 (c-in-sws t fontified t face font-lock-comment-face) 91 92 (c-in-sws t fontified t face font-lock-comment-face) 92 93 (c-in-sws t fontified t face font-lock-comment-face) 93 94 (c-in-sws t fontified t face font-lock-comment-face) 94 95 (c-is-sws t fontified t) 95 102 (c-is-sws t fontified t) 102 103 (c-is-sws t fontified t face font-lock-constant-face) 103 105 (fontified t face font-lock-constant-face) 105 115 (fontified t) 115 151 (fontified t face font-lock-string-face) 151 183 (fontified t) 183 184 (fontified t face (rainbow-delimiters-depth-3-face)) 184 190 (fontified t) 190 191 (fontified t face (rainbow-delimiters-depth-3-face)) 191 201 (fontified t) 201 204 (fontified t face font-lock-constant-face) 204 214 (fontified t) 214 217 (fontified t face font-lock-constant-face) 217 229 (fontified t) 229 230 (fontified t face (rainbow-delimiters-depth-2-face)) 230 231 (fontified t)) . -1618) (undo-tree-id8 . -231) (undo-tree-id9 . -166) (undo-tree-id10 . 138) (undo-tree-id11 . -183) (undo-tree-id12 . 160) (undo-tree-id13 . -74) (undo-tree-id14 . -60) (undo-tree-id15 . -68) (undo-tree-id16 . -93) (undo-tree-id17 . -231) (undo-tree-id18 . -1) (undo-tree-id19 . -231) 1849) nil (25674 37712 89050 989000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1617) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 1618) nil (25674 37712 89046 675000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1317)) nil (25674 37712 88994 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1394)) nil (25674 37712 88993 279000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1471)) nil (25674 37712 88992 335000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1565)) nil (25674 37712 88991 442000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1610)) nil (25674 37712 88985 983000) 0 nil])
([nil nil ((47 . 48) (t 25674 37712 84095 73000)) nil (25674 37783 835351 733000) 0 nil])
([nil nil ((48 . 49)) nil (25674 37783 835351 52000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78 . 79) (nil fontified nil 78 . 79) (nil fontified nil 77 . 78) (nil fontified nil 59 . 77) (nil fontified nil 58 . 59) (nil fontified nil 49 . 58) (49 . 79)) nil (25674 37783 835350 304000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -78) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 79) nil (25674 37783 835348 900000) 0 nil])
([nil nil ((#("~" 0 1 (fontified t c-is-sws t)) . 48) (undo-tree-id28 . -1) (undo-tree-id29 . -1)) nil (25674 37783 835344 723000) 0 nil])
([nil nil ((#("void print_check_expression(CXCursor cursor) {
    if (clang_getCursorKind(cursor) == CXCursor_CompoundStmt)
        return;

    if (clang_getCursorKind(cursor) == CXCursor_BinaryOperator) {
        CXString cursor_spelling = clang_getCursorSpelling(cursor);
        std::cout << clang_getCString(cursor_spelling);
        clang_disposeString(cursor_spelling);
    } else {
        clang_visitChildren(cursor, [](CXCursor c, CXCursor parent, CXClientData client_data) {
                                print_check_expression(c);
                                return CXChildVisit_Continue;
                            },
                            nullptr);
    }
}
" 0 1 (c-is-sws t fontified t face font-lock-type-face) 1 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t) 5 27 (fontified t face font-lock-function-name-face) 27 28 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 28 36 (fontified t face font-lock-type-face) 36 37 (fontified t) 37 43 (fontified t face font-lock-variable-name-face) 43 44 (fontified t face (rainbow-delimiters-depth-1-face)) 44 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 51 (fontified t) 51 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-3-face)) 82 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-2-face)) 108 117 (fontified t) 117 123 (fontified t face font-lock-keyword-face) 123 130 (fontified t) 130 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-2-face)) 134 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-3-face)) 154 160 (fontified t) 160 161 (fontified t face (rainbow-delimiters-depth-3-face)) 161 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-2-face)) 189 190 (fontified t) 190 191 (fontified t face (rainbow-delimiters-depth-2-face)) 191 200 (fontified t) 200 207 (fontified t face font-lock-type-face) 207 208 (fontified t c-type c-decl-id-start face font-lock-type-face) 208 209 (fontified t) 209 224 (fontified t face font-lock-variable-name-face) 224 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-3-face)) 251 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-3-face)) 258 268 (fontified t) 268 271 (fontified t face font-lock-constant-face) 271 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-3-face)) 298 313 (fontified t) 313 314 (fontified t face (rainbow-delimiters-depth-3-face)) 314 343 (fontified t) 343 344 (fontified t face (rainbow-delimiters-depth-3-face)) 344 359 (fontified t) 359 360 (fontified t face (rainbow-delimiters-depth-3-face)) 360 366 (fontified t) 366 367 (fontified t face (rainbow-delimiters-depth-2-face)) 367 368 (fontified t) 368 372 (fontified t face font-lock-keyword-face) 372 373 (fontified t) 373 374 (fontified t face (rainbow-delimiters-depth-2-face)) 374 402 (fontified t) 402 403 (fontified t face (rainbow-delimiters-depth-3-face)) 403 411 (fontified t) 411 412 (fontified t face (rainbow-delimiters-depth-4-face)) 412 413 (fontified t face (rainbow-delimiters-depth-4-face)) 413 414 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-4-face)) 414 422 (fontified t face font-lock-type-face) 422 423 (fontified t) 423 424 (fontified t face font-lock-variable-name-face) 424 425 (fontified t c-type c-decl-arg-start) 425 426 (fontified t) 426 434 (fontified t face font-lock-type-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-variable-name-face) 441 442 (fontified t c-type c-decl-arg-start) 442 443 (fontified t) 443 455 (fontified t face font-lock-type-face) 455 456 (fontified t) 456 467 (fontified t face font-lock-variable-name-face) 467 468 (fontified t face (rainbow-delimiters-depth-4-face)) 468 469 (fontified t) 469 470 (fontified t face (rainbow-delimiters-depth-4-face)) 470 525 (fontified t) 525 526 (fontified t face (rainbow-delimiters-depth-5-face)) 526 527 (fontified t) 527 528 (fontified t face (rainbow-delimiters-depth-5-face)) 528 562 (fontified t) 562 568 (fontified t face font-lock-keyword-face) 568 620 (fontified t) 620 621 (fontified t face (rainbow-delimiters-depth-4-face)) 621 651 (fontified t) 651 658 (fontified t face font-lock-constant-face) 658 659 (fontified t face (rainbow-delimiters-depth-3-face)) 659 665 (fontified t) 665 666 (fontified t face (rainbow-delimiters-depth-2-face)) 666 667 (fontified t) 667 668 (fontified t face (rainbow-delimiters-depth-1-face)) 668 669 (fontified t)) . 79) (undo-tree-id37 . -669) (undo-tree-id38 . -669) (undo-tree-id39 . -669) (t 25674 37783 838243 298000)) nil (25674 37841 905347 460000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-is-sws t)) . -78) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 79) nil (25674 37857 973448 618000) 0 nil] [nil nil ((#("
" 0 1 (fontified t c-is-sws t)) . -78) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 79) ((78 . 79) (t 25674 37809 219510 446000)) (25674 37841 737034 423000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -847) (839 . 847) (#("    " 0 4 (fontified nil)) . -766) (758 . 766) (#("    " 0 4 (fontified nil)) . -685) (677 . 685) 925) nil (25674 37857 973444 820000) 0 nil])
([nil nil ((927 . 928) (#("'" 0 1 (fontified nil face font-lock-warning-face)) . -927) (927 . 928) (684 . 685) (925 . 926) (t 25674 37809 219510 446000)) ((#("'" 0 1 (fontified nil face font-lock-warning-face)) . 925) (undo-tree-id40 . -1) (#("'" 0 1 (fontified t face font-lock-warning-face)) . 684) (undo-tree-id41 . -1) (#("'" 0 1 (fontified nil face font-lock-warning-face)) . 927) (927 . 928) (#("'" 0 1 (fontified t face font-lock-warning-face)) . 927) (undo-tree-id42 . -1)) (25674 37841 734031 213000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -945) (undo-tree-id43 . -1) (937 . 945) 948) nil (25674 37857 973441 554000) 0 nil])
nil
([nil nil ((78 . 79) (t 25674 37857 970608 769000)) nil (25674 37880 537243 588000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t c-is-sws t)) . -78) (undo-tree-id53 . -1) 79) nil (25674 37953 160875 711000) 0 nil])
([nil nil ((48 . 49) (t 25674 37954 625741 537000)) nil (25674 37957 310555 499000) 0 nil] [nil nil ((#("
" 0 1 (fontified t c-in-sws t)) . -47) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("#include <clang-c/CXCursor.h>" 0 1 (fontified t c-is-sws t face font-lock-preprocessor-face c-in-sws t) 1 8 (fontified t face font-lock-preprocessor-face c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t) 10 28 (fontified t face font-lock-string-face c-in-sws t) 28 29 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 48) (undo-tree-id52 . -29)) ((47 . 77) (t 25674 37880 541322 900000)) (25674 37952 417944 452000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t c-is-sws t)) . -48) (undo-tree-id56 . -1) 49) nil (25674 37957 310551 777000) 0 nil])
([nil nil ((47 . 48) (t 25674 37880 541322 900000)) ((#("j" 0 1 (fontified t c-in-sws t)) . 47) (undo-tree-id54 . -1) (undo-tree-id55 . -1)) (25674 37952 417315 495000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-in-sws t)) . -47) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("#include <clang-c/CXCursor.h>" 0 1 (fontified t c-is-sws t face font-lock-preprocessor-face c-in-sws t) 1 8 (fontified t face font-lock-preprocessor-face c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t) 10 28 (fontified t face font-lock-string-face c-in-sws t) 28 29 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 48) (undo-tree-id74 . -29) (t 25674 37957 315787 455000)) nil (25674 38008 441297 134000) 0 nil])
nil
([nil nil ((1 . 3)) nil (25674 38008 441294 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30 . 31) (nil fontified nil 1 . 31) (1 . 31)) nil (25674 38008 441293 189000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30 . 31) (nil fontified nil 1 . 31) (1 . 31) (#("
#include <clang-c/CXCursor.h>" 0 1 (fontified t) 1 2 (fontified t face font-lock-preprocessor-face c-is-sws t c-in-sws t) 2 9 (fontified t face font-lock-preprocessor-face c-in-sws t) 9 10 (fontified t c-in-sws t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62) c-in-sws t) 11 29 (fontified t face font-lock-string-face c-in-sws t) 29 30 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60) c-in-sws t)) . -1) (undo-tree-id63 . -30) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . 1) (undo-tree-id67 . -30) (undo-tree-id68 . 20) (undo-tree-id69 . -11) 31) nil (25674 38008 441291 932000) 0 nil])
([nil nil ((#("#include <clang-c/CXCursor.h>" 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 10 28 (fontified t c-in-sws t face font-lock-string-face) 28 29 (fontified t rear-nonsticky t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60))) . 2) (undo-tree-id59 . -29) (undo-tree-id60 . -29) (undo-tree-id61 . -29) (undo-tree-id62 . -29)) nil (25674 38008 441285 859000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2)) nil (25674 38008 441283 146000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31 . 32) (nil fontified nil 2 . 32) (nil fontified nil 1 . 2) (1 . 32)) nil (25674 38008 441282 530000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t fontified t rear-nonsticky t)) . -31) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 32) nil (25674 38008 441277 97000) 0 nil])
([nil nil ((678 . 687) (t 25674 38008 487875 200000)) nil (25674 38089 8411 92000) 0 nil])
([nil nil ((nil rear-nonsticky nil 836 . 837) (nil fontified nil 687 . 837) (687 . 837)) nil (25674 38089 8410 169000) 0 nil])
([nil nil ((748 . 749)) nil (25674 38089 8409 540000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face font-lock-type-face)) . -748) (undo-tree-id75 . -1) 749) nil (25674 38089 8408 712000) 0 nil])
([nil nil ((748 . 752)) nil (25674 38089 8399 23000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -756) (748 . 756)) nil (25674 38089 8397 937000) 0 nil])
([nil nil ((apply -3 846 930 undo--wrap-and-run-primitive-undo 846 930 ((854 . 857) 846))) nil (25674 38089 8394 95000) 0 nil])
([nil nil ((747 . 756) (t 25674 38089 22682 301000)) nil (25674 38169 828762 62000) 0 nil])
([nil nil ((nil rear-nonsticky nil 910 . 911) (nil fontified nil 756 . 911) (756 . 911)) nil (25674 38169 828761 799000) 0 nil])
([nil nil ((783 . 787)) nil (25674 38169 828761 379000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -791) (783 . 791)) nil (25674 38169 828760 693000) 0 nil])
([nil nil ((832 . 836)) nil (25674 38169 828759 622000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -840) (832 . 840)) nil (25674 38169 828754 768000) 0 nil])
([nil nil ((apply -3 928 1028 undo--wrap-and-run-primitive-undo 928 1028 ((936 . 939))) (t 25674 38169 828108 84000)) nil (25674 38174 654891 74000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -926) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 927 (t 25674 38174 658134 722000)) nil (25674 38237 785499 868000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t c-in-sws t face font-lock-comment-face)) . -1026) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 1027 (t 25674 38177 718166 564000)) nil (25674 38243 316640 786000) 0 nil] [nil nil ((#("if (clang_getCursorKind(cursor) == CXCursor_ForStmt) {
        CXSourceLocation location = clang_getCursorLocation(cursor);
        CXCursor condition_cursor;
        clang_Cursor_getTranslationUnit(cursor);
        condition_cursor = clang_getCursor(clang_Cursor_getTranslationUnit(cursor), location);
        // CXCursor condition_cursor = clang_getCursor(clang_getTranslationUnit(cursor), location);
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t) 55 63 (fontified t) 63 78 (fontified t face font-lock-type-face) 78 79 (fontified t c-type c-decl-id-start face font-lock-type-face) 79 80 (fontified t) 80 88 (fontified t face font-lock-variable-name-face) 88 114 (fontified t) 114 115 (fontified t face (rainbow-delimiters-depth-3-face)) 115 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 123 (fontified t) 123 124 (fontified t) 124 132 (fontified t) 132 139 (fontified t face font-lock-type-face) 139 140 (fontified t c-type c-decl-id-start face font-lock-type-face) 140 141 (fontified t) 141 157 (fontified t face font-lock-variable-name-face) 157 159 (fontified t) 159 167 (fontified t) 167 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 205 (fontified t) 205 206 (fontified t face (rainbow-delimiters-depth-3-face)) 206 208 (fontified t) 208 216 (fontified t) 216 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-3-face)) 251 282 (fontified t) 282 283 (fontified t face (rainbow-delimiters-depth-4-face)) 283 289 (fontified t) 289 290 (fontified t face (rainbow-delimiters-depth-4-face)) 290 300 (fontified t) 300 301 (fontified t face (rainbow-delimiters-depth-3-face)) 301 302 (fontified t) 302 303 (fontified t) 303 311 (c-in-sws t c-is-sws t fontified t) 311 312 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 312 314 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 314 321 (c-in-sws t fontified t face font-lock-comment-face) 321 322 (c-in-sws t fontified t face font-lock-comment-face) 322 323 (c-in-sws t fontified t face font-lock-comment-face) 323 339 (c-in-sws t fontified t face font-lock-comment-face) 339 357 (c-in-sws t fontified t face font-lock-comment-face) 357 358 (c-in-sws t fontified t face font-lock-comment-face) 358 382 (c-in-sws t fontified t face font-lock-comment-face) 382 383 (c-in-sws t fontified t face font-lock-comment-face) 383 389 (c-in-sws t fontified t face font-lock-comment-face) 389 390 (c-in-sws t fontified t face font-lock-comment-face) 390 400 (c-in-sws t fontified t face font-lock-comment-face) 400 401 (c-in-sws t fontified t face font-lock-comment-face) 401 402 (c-in-sws t fontified t face font-lock-comment-face) 402 403 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face)) . -624) (undo-tree-id92 . -302) (undo-tree-id93 . -403) (undo-tree-id94 . -132) (undo-tree-id95 . -403) (undo-tree-id96 . -1) (undo-tree-id97 . -132) (undo-tree-id98 . -133) (undo-tree-id99 . -403) (t 25674 38177 718166 564000)) ((624 . 1027)) (25674 38237 300742 7000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -926) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("        // CXCursor condition_cursor = clang_getCursor(clang_getTranslationUnit(cursor), location);
        // CXCursor condition_cursor = clang_getCursor(cursor, CXCursor_Condition);" 0 8 (fontified t c-in-sws t c-is-sws t) 8 9 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 9 11 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 11 18 (fontified t c-in-sws t face font-lock-comment-face) 18 19 (fontified t c-in-sws t face font-lock-comment-face) 19 20 (fontified t c-in-sws t face font-lock-comment-face) 20 36 (fontified t c-in-sws t face font-lock-comment-face) 36 54 (fontified t c-in-sws t face font-lock-comment-face) 54 55 (fontified t c-in-sws t face font-lock-comment-face) 55 79 (fontified t c-in-sws t face font-lock-comment-face) 79 80 (fontified t c-in-sws t face font-lock-comment-face) 80 86 (fontified t c-in-sws t face font-lock-comment-face) 86 87 (fontified t c-in-sws t face font-lock-comment-face) 87 97 (fontified t c-in-sws t face font-lock-comment-face) 97 98 (fontified t c-in-sws t face font-lock-comment-face) 98 99 (fontified t c-in-sws t face font-lock-comment-face) 99 100 (fontified t face font-lock-comment-face c-in-sws t) 100 101 (c-in-sws t c-is-sws t fontified t) 101 108 (c-in-sws t c-is-sws t fontified t) 108 109 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 109 111 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 111 114 (c-in-sws t fontified t face font-lock-comment-face) 114 118 (c-in-sws t fontified t face font-lock-comment-face) 118 119 (c-in-sws t fontified t face font-lock-comment-face) 119 120 (c-in-sws t fontified t face font-lock-comment-face) 120 136 (c-in-sws t fontified t face font-lock-comment-face) 136 154 (c-in-sws t fontified t face font-lock-comment-face) 154 155 (c-in-sws t fontified t face font-lock-comment-face) 155 181 (c-in-sws t fontified t face font-lock-comment-face) 181 182 (c-in-sws t fontified t face font-lock-comment-face) 182 183 (c-in-sws t fontified t face font-lock-comment-face)) . 927) (undo-tree-id112 . -13) (undo-tree-id113 . -113) (undo-tree-id114 . -100) (undo-tree-id115 . 72) (undo-tree-id116 . -119) (undo-tree-id117 . -13) (undo-tree-id118 . -113) (undo-tree-id119 . -113) (undo-tree-id120 . -114) 940) nil (25674 38243 316636 416000) 0 nil])
([nil nil ((621 . 625) (#("    " 0 4 (fontified nil)) . 620) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (624 . 625)) ((#("
" 0 1 (fontified nil)) . 624) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (620 . 624) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 621) (undo-tree-id103 . -4)) (25674 38236 954115 330000) 0 nil])
([nil nil ((apply -27 619 1185 undo--wrap-and-run-primitive-undo 619 1185 ((1179 . 1182) (1127 . 1130) (1026 . 1029) (942 . 945) (844 . 847) (792 . 795) (754 . 757) (682 . 685) (620 . 623) 619)) (t 25674 38243 320490 217000)) nil (25674 38251 210569 926000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -624) (undo-tree-id78 . -1) 625) ((624 . 625)) (25674 38236 953325 800000) 0 nil])
([nil nil ((#("
//     if (clang_getCursorKind(cursor) == CXCursor_ForStmt) {
//         CXSourceLocation location = clang_getCursorLocation(cursor);
//         CXCursor condition_cursor;
//         clang_Cursor_getTranslationUnit(cursor);
//         condition_cursor = clang_getCursor(clang_Cursor_getTranslationUnit(cursor), location);
//         CXString condition_spelling = clang_getCursorSpelling(condition_cursor);
//         std::cout << \"For loop condition: \" << clang_getCString(condition_spelling) << std::endl;
//         clang_disposeString(condition_spelling);
// }
" 0 1 (fontified t) 1 2 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 4 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 4 8 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 8 10 (fontified t c-in-sws t face font-lock-comment-face) 10 11 (fontified t c-in-sws t face font-lock-comment-face) 11 12 (fontified t c-in-sws t face font-lock-comment-face) 12 31 (fontified t c-in-sws t face font-lock-comment-face) 31 32 (fontified t c-in-sws t face font-lock-comment-face) 32 38 (fontified t c-in-sws t face font-lock-comment-face) 38 39 (fontified t c-in-sws t face font-lock-comment-face) 39 59 (fontified t c-in-sws t face font-lock-comment-face) 59 60 (fontified t c-in-sws t face font-lock-comment-face) 60 61 (fontified t c-in-sws t face font-lock-comment-face) 61 62 (fontified t c-in-sws t face font-lock-comment-face) 62 63 (fontified t c-in-sws t face font-lock-comment-face) 63 66 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 66 74 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 74 89 (fontified t c-in-sws t face font-lock-comment-face) 89 90 (fontified t c-in-sws t face font-lock-comment-face) 90 91 (fontified t c-in-sws t face font-lock-comment-face) 91 99 (fontified t c-in-sws t face font-lock-comment-face) 99 125 (fontified t c-in-sws t face font-lock-comment-face) 125 126 (fontified t c-in-sws t face font-lock-comment-face) 126 132 (fontified t c-in-sws t face font-lock-comment-face) 132 133 (fontified t c-in-sws t face font-lock-comment-face) 133 134 (fontified t c-in-sws t face font-lock-comment-face) 134 135 (fontified t c-in-sws t face font-lock-comment-face) 135 138 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 138 146 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 146 153 (fontified t c-in-sws t face font-lock-comment-face) 153 154 (fontified t c-in-sws t face font-lock-comment-face) 154 155 (fontified t c-in-sws t face font-lock-comment-face) 155 171 (fontified t c-in-sws t face font-lock-comment-face) 171 173 (fontified t c-in-sws t face font-lock-comment-face) 173 176 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 176 184 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 184 215 (fontified t c-in-sws t face font-lock-comment-face) 215 216 (fontified t c-in-sws t face font-lock-comment-face) 216 222 (fontified t c-in-sws t face font-lock-comment-face) 222 223 (fontified t c-in-sws t face font-lock-comment-face) 223 225 (fontified t c-in-sws t face font-lock-comment-face) 225 228 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 228 236 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 236 270 (fontified t c-in-sws t face font-lock-comment-face) 270 271 (fontified t c-in-sws t face font-lock-comment-face) 271 302 (fontified t c-in-sws t face font-lock-comment-face) 302 303 (fontified t c-in-sws t face font-lock-comment-face) 303 309 (fontified t c-in-sws t face font-lock-comment-face) 309 310 (fontified t c-in-sws t face font-lock-comment-face) 310 320 (fontified t c-in-sws t face font-lock-comment-face) 320 321 (fontified t c-in-sws t face font-lock-comment-face) 321 322 (fontified t c-in-sws t face font-lock-comment-face) 322 323 (fontified t c-in-sws t face font-lock-comment-face) 323 326 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 326 327 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 327 334 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 334 335 (fontified t c-in-sws t face font-lock-comment-face) 335 341 (fontified t c-in-sws t face font-lock-comment-face) 341 342 (fontified t c-in-sws t face font-lock-comment-face) 342 343 (fontified t c-in-sws t face font-lock-comment-face) 343 361 (fontified t c-in-sws t face font-lock-comment-face) 361 387 (fontified t c-in-sws t face font-lock-comment-face) 387 388 (fontified t c-in-sws t face font-lock-comment-face) 388 404 (fontified t c-in-sws t face font-lock-comment-face) 404 405 (fontified t c-in-sws t face font-lock-comment-face) 405 407 (fontified t c-in-sws t face font-lock-comment-face) 407 410 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 410 418 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 418 421 (fontified t c-in-sws t face font-lock-comment-face) 421 431 (fontified t c-in-sws t face font-lock-comment-face) 431 453 (fontified t c-in-sws t face font-lock-comment-face) 453 473 (fontified t c-in-sws t face font-lock-comment-face) 473 474 (fontified t c-in-sws t face font-lock-comment-face) 474 491 (fontified t c-in-sws t face font-lock-comment-face) 491 492 (fontified t c-in-sws t face font-lock-comment-face) 492 493 (fontified t c-in-sws t face font-lock-comment-face) 493 497 (fontified t c-in-sws t face font-lock-comment-face) 497 500 (fontified t c-in-sws t face font-lock-comment-face) 500 508 (fontified t c-in-sws t face font-lock-comment-face) 508 511 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 511 519 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 519 538 (fontified t c-in-sws t face font-lock-comment-face) 538 539 (fontified t c-in-sws t face font-lock-comment-face) 539 557 (fontified t c-in-sws t face font-lock-comment-face) 557 558 (fontified t c-in-sws t face font-lock-comment-face) 558 560 (fontified t c-in-sws t face font-lock-comment-face) 560 561 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 561 563 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 563 564 (fontified t c-in-sws t face font-lock-comment-face) 564 565 (fontified t c-in-sws t face font-lock-comment-face)) . -619) (undo-tree-id123 . -565) (undo-tree-id124 . -526) (undo-tree-id125 . -508) (undo-tree-id126 . -322) (undo-tree-id127 . -146) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -322) (undo-tree-id131 . -565) (undo-tree-id132 . -565) (undo-tree-id133 . -565) (undo-tree-id134 . -1) (undo-tree-id135 . -565) 1184 (t 25674 38251 211646 86000)) nil (25674 38572 859686 190000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil)) . 1) (#("#define CXCursor_Condition 223
" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-preprocessor-face) 1 7 (c-in-sws t fontified t face font-lock-preprocessor-face) 7 8 (c-in-sws t fontified t) 8 26 (c-in-sws t fontified t face font-lock-variable-name-face) 26 30 (c-in-sws t fontified t) 30 31 (fontified t c-in-sws t)) . 1) (undo-tree-id136 . -30) (undo-tree-id137 . -31) (undo-tree-id138 . -31) (undo-tree-id139 . -31) (undo-tree-id140 . -30) (undo-tree-id141 . -30) (undo-tree-id142 . -31) (undo-tree-id143 . -1) (undo-tree-id144 . -31) 32 (t 25674 38572 870406 387000)) nil (25674 38877 20689 185000) 0 nil])
([nil nil ((#("#include <iostream>
#include <clang-c/Index.h>

void print_ast(CXCursor cursor, int depth) {
    if (clang_getCursorKind(cursor) == CXCursor_FirstInvalid)
        return;

    for (int i = 0; i < depth; ++i)
        std::cout << \"  \";

    CXString cursor_kind_name = clang_getCursorKindSpelling(clang_getCursorKind(cursor));
    CXString cursor_spelling = clang_getCursorSpelling(cursor);
    std::cout << clang_getCString(cursor_kind_name) << \" \" << clang_getCString(cursor_spelling) << std::endl;

    clang_disposeString(cursor_kind_name);
    clang_disposeString(cursor_spelling);

    clang_visitChildren(cursor,
                        [](CXCursor c, CXCursor parent, CXClientData client_data) {
                            int *depth = reinterpret_cast<int*>(client_data);
                            print_ast(c, *depth + 1);
                            return CXChildVisit_Continue;
                        },
                        &depth);
}

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cerr << \"Usage: ast_printer <path_to_c_file>\" << std::endl;
        return 1;
    }

    CXIndex index = clang_createIndex(0, 0);
    CXTranslationUnit tu = clang_createTranslationUnitFromSourceFile(index, argv[1], 0, nullptr, 0, nullptr);

    if (!tu) {
        std::cerr << \"Error: Unable to parse the C file.\" << std::endl;
        return 1;
    }

    CXCursor root_cursor = clang_getTranslationUnitCursor(tu);
    print_ast(root_cursor, 0);

    clang_disposeTranslationUnit(tu);
    clang_disposeIndex(index);

    return 0;
}
" 0 1 (fontified t face font-lock-preprocessor-face c-is-sws t c-in-sws t) 1 8 (fontified t face font-lock-preprocessor-face c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t) 10 18 (fontified t face font-lock-string-face c-in-sws t) 18 19 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t) 19 20 (c-in-sws t fontified t) 20 21 (c-is-sws t c-in-sws t fontified t face font-lock-preprocessor-face) 21 28 (c-in-sws t fontified t face font-lock-preprocessor-face) 28 29 (c-in-sws t fontified t) 29 30 (c-in-sws t syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 30 45 (c-in-sws t fontified t face font-lock-string-face) 45 46 (c-in-sws t syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 46 47 (fontified t c-in-sws t) 47 48 (c-is-sws t fontified t) 48 49 (c-is-sws t fontified t face font-lock-type-face) 49 51 (fontified t face font-lock-type-face) 51 52 (fontified t c-type c-decl-id-start face font-lock-type-face) 52 53 (fontified t) 53 62 (fontified t face font-lock-function-name-face) 62 63 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 63 71 (fontified t face font-lock-type-face) 71 72 (fontified t) 72 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t c-type c-decl-arg-start) 79 80 (fontified t) 80 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 89 (fontified t face font-lock-variable-name-face) 89 90 (fontified t face (rainbow-delimiters-depth-1-face)) 90 91 (fontified t) 91 92 (fontified t face (rainbow-delimiters-depth-1-face)) 92 97 (fontified t) 97 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-2-face)) 101 120 (fontified t) 120 121 (fontified t face (rainbow-delimiters-depth-3-face)) 121 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-3-face)) 128 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-2-face)) 154 163 (fontified t) 163 169 (fontified t face font-lock-keyword-face) 169 176 (fontified t) 176 179 (fontified t face font-lock-keyword-face) 179 180 (fontified t) 180 181 (fontified t face (rainbow-delimiters-depth-2-face)) 181 183 (fontified t face font-lock-type-face) 183 184 (fontified t c-type c-decl-id-start face font-lock-type-face) 184 185 (fontified t) 185 186 (fontified t face font-lock-variable-name-face) 186 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-2-face)) 207 216 (fontified t) 216 219 (fontified t face font-lock-constant-face) 219 229 (fontified t) 229 233 (fontified t face font-lock-string-face) 233 240 (fontified t) 240 247 (fontified t face font-lock-type-face) 247 248 (fontified t c-type c-decl-id-start face font-lock-type-face) 248 249 (fontified t) 249 265 (fontified t face font-lock-variable-name-face) 265 295 (fontified t) 295 296 (fontified t face (rainbow-delimiters-depth-2-face)) 296 315 (fontified t) 315 316 (fontified t face (rainbow-delimiters-depth-3-face)) 316 322 (fontified t) 322 323 (fontified t face (rainbow-delimiters-depth-3-face)) 323 324 (fontified t face (rainbow-delimiters-depth-2-face)) 324 330 (fontified t) 330 337 (fontified t face font-lock-type-face) 337 338 (fontified t c-type c-decl-id-start face font-lock-type-face) 338 339 (fontified t) 339 354 (fontified t face font-lock-variable-name-face) 354 380 (fontified t) 380 381 (fontified t face (rainbow-delimiters-depth-2-face)) 381 387 (fontified t) 387 388 (fontified t face (rainbow-delimiters-depth-2-face)) 388 394 (fontified t) 394 397 (fontified t face font-lock-constant-face) 397 423 (fontified t) 423 424 (fontified t face (rainbow-delimiters-depth-2-face)) 424 440 (fontified t) 440 441 (fontified t face (rainbow-delimiters-depth-2-face)) 441 445 (fontified t) 445 448 (fontified t face font-lock-string-face) 448 468 (fontified t) 468 469 (fontified t face (rainbow-delimiters-depth-2-face)) 469 484 (fontified t) 484 485 (fontified t face (rainbow-delimiters-depth-2-face)) 485 489 (fontified t) 489 492 (fontified t face font-lock-constant-face) 492 524 (fontified t) 524 525 (fontified t face (rainbow-delimiters-depth-2-face)) 525 541 (fontified t) 541 542 (fontified t face (rainbow-delimiters-depth-2-face)) 542 567 (fontified t) 567 568 (fontified t face (rainbow-delimiters-depth-2-face)) 568 583 (fontified t) 583 584 (fontified t face (rainbow-delimiters-depth-2-face)) 584 586 (fontified t) 586 587 (fontified t) 587 588 (c-is-sws t c-in-sws t fontified t) 588 591 (c-is-sws t c-in-sws t fontified t) 591 592 (c-is-sws t fontified t) 592 610 (fontified t) 610 611 (fontified t face (rainbow-delimiters-depth-2-face)) 611 619 (fontified t) 619 633 (fontified t) 633 643 (fontified t) 643 644 (fontified t face (rainbow-delimiters-depth-3-face)) 644 645 (fontified t face (rainbow-delimiters-depth-3-face)) 645 646 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 646 654 (fontified t face font-lock-type-face) 654 655 (fontified t) 655 656 (fontified t face font-lock-variable-name-face) 656 657 (fontified t c-type c-decl-arg-start) 657 658 (fontified t) 658 666 (fontified t face font-lock-type-face) 666 667 (fontified t) 667 673 (fontified t face font-lock-variable-name-face) 673 674 (fontified t c-type c-decl-arg-start) 674 675 (fontified t) 675 687 (fontified t face font-lock-type-face) 687 688 (fontified t) 688 699 (fontified t face font-lock-variable-name-face) 699 700 (fontified t face (rainbow-delimiters-depth-3-face)) 700 701 (fontified t) 701 702 (fontified t face (rainbow-delimiters-depth-3-face)) 702 703 (fontified t) 703 731 (fontified t) 731 733 (fontified t face font-lock-type-face) 733 734 (fontified t c-type c-decl-id-start face font-lock-type-face) 734 736 (fontified t) 736 741 (fontified t face font-lock-variable-name-face) 741 744 (fontified t) 744 760 (fontified t face font-lock-keyword-face) 760 761 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-4-face)) 761 764 (fontified t face font-lock-type-face) 764 765 (fontified t) 765 766 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-4-face)) 766 767 (fontified t face (rainbow-delimiters-depth-4-face)) 767 778 (fontified t) 778 779 (fontified t face (rainbow-delimiters-depth-4-face)) 779 818 (fontified t) 818 819 (fontified t face (rainbow-delimiters-depth-4-face)) 819 832 (fontified t) 832 833 (fontified t face (rainbow-delimiters-depth-4-face)) 833 863 (fontified t) 863 869 (fontified t face font-lock-keyword-face) 869 917 (fontified t) 917 918 (fontified t face (rainbow-delimiters-depth-3-face)) 918 950 (fontified t) 950 951 (fontified t face (rainbow-delimiters-depth-2-face)) 951 953 (fontified t) 953 954 (fontified t face (rainbow-delimiters-depth-1-face)) 954 955 (fontified t) 955 956 (fontified t) 956 958 (fontified t face font-lock-type-face) 958 959 (fontified t c-type c-decl-id-start face font-lock-type-face) 959 960 (fontified t) 960 964 (fontified t face font-lock-function-name-face) 964 965 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 965 968 (fontified t face font-lock-type-face) 968 969 (fontified t) 969 973 (fontified t face font-lock-variable-name-face) 973 974 (fontified t c-type c-decl-arg-start) 974 975 (fontified t) 975 979 (fontified t face font-lock-type-face) 979 982 (fontified t) 982 986 (fontified t face font-lock-variable-name-face) 986 987 (fontified t face (rainbow-delimiters-depth-1-face)) 987 988 (fontified t) 988 989 (fontified t face (rainbow-delimiters-depth-1-face)) 989 994 (fontified t) 994 996 (fontified t face font-lock-keyword-face) 996 997 (fontified t) 997 998 (fontified t face (rainbow-delimiters-depth-2-face)) 998 1007 (fontified t) 1007 1008 (fontified t face (rainbow-delimiters-depth-2-face)) 1008 1009 (fontified t) 1009 1010 (fontified t face (rainbow-delimiters-depth-2-face)) 1010 1019 (fontified t) 1019 1022 (fontified t face font-lock-constant-face) 1022 1032 (fontified t) 1032 1069 (fontified t face font-lock-string-face) 1069 1073 (fontified t) 1073 1076 (fontified t face font-lock-constant-face) 1076 1092 (fontified t) 1092 1098 (fontified t face font-lock-keyword-face) 1098 1106 (fontified t) 1106 1107 (fontified t face (rainbow-delimiters-depth-2-face)) 1107 1113 (fontified t) 1113 1119 (fontified t face font-lock-type-face) 1119 1120 (fontified t c-type c-decl-id-start face font-lock-type-face) 1120 1121 (fontified t) 1121 1126 (fontified t face font-lock-variable-name-face) 1126 1128 (fontified t) 1128 1129 (fontified t) 1129 1146 (fontified t) 1146 1147 (fontified t face (rainbow-delimiters-depth-2-face)) 1147 1151 (fontified t) 1151 1152 (fontified t face (rainbow-delimiters-depth-2-face)) 1152 1154 (fontified t) 1154 1158 (fontified t) 1158 1174 (fontified t face font-lock-type-face) 1174 1175 (fontified t c-type c-decl-id-start face font-lock-type-face) 1175 1176 (fontified t) 1176 1177 (fontified t face font-lock-variable-name-face) 1177 1178 (fontified t face font-lock-variable-name-face) 1178 1193 (fontified t) 1193 1219 (fontified t) 1219 1222 (fontified t) 1222 1223 (fontified t face (rainbow-delimiters-depth-2-face)) 1223 1234 (fontified t) 1234 1235 (fontified t face (rainbow-delimiters-depth-3-face)) 1235 1236 (fontified t) 1236 1237 (fontified t face (rainbow-delimiters-depth-3-face)) 1237 1242 (fontified t) 1242 1249 (fontified t face font-lock-constant-face) 1249 1254 (fontified t) 1254 1261 (fontified t face font-lock-constant-face) 1261 1262 (fontified t face (rainbow-delimiters-depth-2-face)) 1262 1264 (fontified t) 1264 1269 (fontified t) 1269 1271 (fontified t face font-lock-keyword-face) 1271 1272 (fontified t) 1272 1273 (fontified t face (rainbow-delimiters-depth-2-face)) 1273 1274 (fontified t face font-lock-negation-char-face) 1274 1276 (fontified t) 1276 1277 (fontified t face (rainbow-delimiters-depth-2-face)) 1277 1278 (fontified t) 1278 1279 (fontified t face (rainbow-delimiters-depth-2-face)) 1279 1288 (fontified t) 1288 1291 (fontified t face font-lock-constant-face) 1291 1301 (fontified t) 1301 1337 (fontified t face font-lock-string-face) 1337 1341 (fontified t) 1341 1344 (fontified t face font-lock-constant-face) 1344 1360 (fontified t) 1360 1366 (fontified t face font-lock-keyword-face) 1366 1374 (fontified t) 1374 1375 (fontified t face (rainbow-delimiters-depth-2-face)) 1375 1381 (fontified t) 1381 1388 (fontified t face font-lock-type-face) 1388 1389 (fontified t c-type c-decl-id-start face font-lock-type-face) 1389 1390 (fontified t) 1390 1401 (fontified t face font-lock-variable-name-face) 1401 1434 (fontified t) 1434 1435 (fontified t face (rainbow-delimiters-depth-2-face)) 1435 1437 (fontified t) 1437 1438 (fontified t face (rainbow-delimiters-depth-2-face)) 1438 1453 (fontified t) 1453 1454 (fontified t face (rainbow-delimiters-depth-2-face)) 1454 1468 (fontified t) 1468 1469 (fontified t face (rainbow-delimiters-depth-2-face)) 1469 1504 (fontified t) 1504 1505 (fontified t face (rainbow-delimiters-depth-2-face)) 1505 1507 (fontified t) 1507 1508 (fontified t face (rainbow-delimiters-depth-2-face)) 1508 1532 (fontified t) 1532 1533 (fontified t face (rainbow-delimiters-depth-2-face)) 1533 1538 (fontified t) 1538 1539 (fontified t face (rainbow-delimiters-depth-2-face)) 1539 1546 (fontified t) 1546 1547 (fontified t face font-lock-keyword-face) 1547 1552 (face font-lock-keyword-face fontified t) 1552 1556 (fontified t) 1556 1557 (fontified t face (rainbow-delimiters-depth-1-face)) 1557 1558 (fontified t)) . 1) (undo-tree-id145 . -19) (undo-tree-id146 . -1558) (undo-tree-id147 . 1548) (undo-tree-id148 . -18) (undo-tree-id149 . -46) (undo-tree-id150 . -46) (undo-tree-id151 . -586) (undo-tree-id152 . -586) (undo-tree-id153 . -586) (undo-tree-id154 . -586) (undo-tree-id155 . -586) (undo-tree-id156 . -586) (undo-tree-id157 . -586) (undo-tree-id158 . -586) (undo-tree-id159 . -586) (undo-tree-id160 . -235) (undo-tree-id161 . -47) (undo-tree-id162 . -1558) (undo-tree-id163 . -956) (undo-tree-id164 . -1558) (undo-tree-id165 . -1558) (undo-tree-id166 . -1558) (undo-tree-id167 . -1558) (undo-tree-id168 . -1558) (t 25674 38877 20879 317000)) nil (25674 39460 886950 294000) 0 nil])
([nil current ((nil rear-nonsticky nil 2602 . 2603) (nil fontified nil 1811 . 2603) (nil fontified nil 1810 . 1811) (nil fontified nil 1806 . 1810) (nil fontified nil 1805 . 1806) (nil fontified nil 1 . 1805) (1 . 2603)) nil (25674 39460 886923 171000) 0 nil])
nil
