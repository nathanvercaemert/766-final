(undo-tree-save-format-version . 1)
"76032b7fd73070675d9cc1cee0672f50a3e37a62"
[nil nil nil nil (25674 61417 404197 969000) 0 nil]
([nil nil ((nil rear-nonsticky nil 401 . 402) (nil fontified nil 1 . 402) (1 . 402) (t . -1)) nil (25674 61417 404196 761000) 0 nil])
([nil nil ((#("./program" 0 9 (fontified t face font-lock-string-face)) . 58) (undo-tree-id0 . -9) (undo-tree-id1 . -9) (undo-tree-id2 . -9) (undo-tree-id3 . -9) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -9) 60) nil (25674 61417 404195 915000) 0 nil])
([nil nil ((nil rear-nonsticky nil 83 . 84) (nil fontified nil 58 . 84) (58 . 84)) nil (25674 61417 404172 208000) 0 nil])
([nil nil ((nil rear-nonsticky nil 94 . 95) (nil fontified nil 84 . 95) (84 . 95)) nil (25674 61417 404167 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1028 . 1029) (nil fontified nil 430 . 1029) (430 . 1029) (t 25674 61417 402528 617000)) nil (25674 61647 437586 542000) 0 nil])
([nil nil ((#("#!/bin/bash

# Get the path to the program
program_path=\"/root/766-volume/nhvercae/ast_printer\"

# Find all .c files in the current directory and its subdirectories
find . -type f -name \"*.c\" | while read -r file; do
    # Check if the file exists
    if [ -e \"$file\" ]; then
        # Print the file name
        echo \"Processing file: $file\"

        # Execute the program on the file
        $program_path \"$file\"
    fi
done
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 7 (fontified t face font-lock-comment-face) 7 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-comment-face) 12 13 (fontified t) 13 15 (fontified t face font-lock-comment-delimiter-face) 15 43 (fontified t face font-lock-comment-face) 43 55 (fontified t face font-lock-variable-name-face) 55 56 (fontified t) 56 57 (fontified t face font-lock-string-face) 57 82 (fontified t face font-lock-string-face) 82 83 (fontified t rear-nonsticky t face font-lock-string-face) 83 93 (fontified t face font-lock-string-face) 93 94 (fontified t rear-nonsticky t face font-lock-string-face) 94 95 (fontified t face font-lock-string-face) 95 96 (fontified t) 96 97 (fontified t) 97 99 (fontified t face font-lock-comment-delimiter-face) 99 165 (fontified t face font-lock-comment-face) 165 186 (fontified t) 186 191 (fontified t face font-lock-string-face) 191 194 (fontified t) 194 200 (fontified t face font-lock-keyword-face) 200 204 (fontified t face font-lock-builtin-face) 204 214 (fontified t) 214 216 (fontified t face font-lock-keyword-face) 216 221 (fontified t) 221 223 (fontified t face font-lock-comment-delimiter-face) 223 248 (fontified t face font-lock-comment-face) 248 252 (fontified t) 252 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 256 (fontified t face (rainbow-delimiters-depth-1-face)) 256 260 (fontified t) 260 267 (fontified t face font-lock-string-face) 267 268 (fontified t) 268 269 (fontified t face (rainbow-delimiters-depth-1-face)) 269 271 (fontified t) 271 275 (fontified t face font-lock-keyword-face) 275 284 (fontified t) 284 286 (fontified t face font-lock-comment-delimiter-face) 286 306 (fontified t face font-lock-comment-face) 306 314 (fontified t) 314 318 (fontified t face font-lock-builtin-face) 318 319 (fontified t) 319 343 (fontified t face font-lock-string-face) 343 353 (fontified t) 353 355 (fontified t face font-lock-comment-delimiter-face) 355 387 (fontified t face font-lock-comment-face) 387 396 (fontified t) 396 408 (fontified t face font-lock-variable-name-face) 408 409 (fontified t) 409 416 (fontified t face font-lock-string-face) 416 421 (fontified t) 421 423 (fontified t face font-lock-keyword-face) 423 424 (fontified t) 424 428 (fontified t face font-lock-keyword-face) 428 429 (rear-nonsticky t fontified t)) . 1) (undo-tree-id7 . -429) (undo-tree-id8 . -429) (undo-tree-id9 . -57) (undo-tree-id10 . -57) (undo-tree-id11 . -57) (undo-tree-id12 . -57) (undo-tree-id13 . 355) (undo-tree-id14 . -82) (undo-tree-id15 . -57) (undo-tree-id16 . -94) (undo-tree-id17 . -94) (undo-tree-id18 . -94) (undo-tree-id19 . -94) (undo-tree-id20 . -94) (undo-tree-id21 . -83) (undo-tree-id22 . -94) (undo-tree-id23 . -429) (undo-tree-id24 . -94) (undo-tree-id25 . -429) (undo-tree-id26 . -94) (undo-tree-id27 . -95) (undo-tree-id28 . -429)) nil (25674 61647 437583 27000) 0 nil])
([nil nil ((#("program" 0 7 (fontified t face font-lock-string-face)) . 60) (undo-tree-id29 . -7) (undo-tree-id30 . -7) (undo-tree-id31 . -7) 67 (t 25674 61647 451555 83000)) nil (25674 61708 270192 515000) 0 nil])
([nil nil ((nil rear-nonsticky nil 85 . 86) (nil fontified nil 60 . 86) (60 . 86)) nil (25674 61708 270180 869000) 0 nil])
([nil nil ((nil rear-nonsticky nil 96 . 97) (nil fontified nil 86 . 97) (86 . 97)) nil (25674 61708 270176 424000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-string-face)) . -59) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 60 (t 25674 61708 279120 974000)) nil (25674 61719 338292 106000) 0 nil])
([nil current ((#("." 0 1 (fontified t face font-lock-string-face)) . -58) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 59 (t 25674 61719 344151 504000)) nil (25674 61720 532821 903000) 0 nil])
nil
